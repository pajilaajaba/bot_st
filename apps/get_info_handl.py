from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import os
from dotenv import load_dotenv

import apps.keyboard as kb
from apps.states import Person, Key
import apps.database.request as rq

router = Router()

@router.message(CommandStart())
async def start_handle(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ-—Ü–∏–π –≤–Ω–∏–∑—ÉüëÄ‚¨áÔ∏è", 
                         reply_markup=kb.start_mess)
    
    
@router.callback_query(F.data == 'supp')
async def supp_handle(callback: CallbackQuery):
    await callback.message.edit_text("–í–æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è –∫ –Ω–µ–º—É –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã @Stequa", reply_markup = kb.back)
    
    
@router.callback_query(F.data == 'back')
async def back_to_menu(callback: CallbackQuery):
    await callback. message.edit_text("–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ-—Ü–∏–π –≤–Ω–∏–∑—ÉüëÄ‚¨áÔ∏è", 
                         reply_markup=kb.start_mess)
    
    
@router.callback_query(F.data == 'longsliv')
async def begin_input(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
    await state.clear()
    await state.set_state(Person.FIO)
    
    
@router.message(Person.FIO)
async def FIO_input(message: Message, state: FSMContext):
    await state.update_data(FIO = message.text)
    await state.set_state(Person.number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    
@router.message(Person.number)
async def number_input(message: Message, state: FSMContext):
    await state.update_data(number = message.text)
    await state.set_state(None)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–æ–Ω–≥—Å–ª–∏–≤–∞", reply_markup=kb.size)
    
@router.callback_query((F.data == 'l') | (F.data == 'm') | (F.data == 'xl'))
async def size_input(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    tex = callback.data.upper()
    await state.set_state(Person.size)
    await state.update_data(size = tex)
    await state.set_state(Person.address)
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    
    
@router.message(Person.address)
async def adress_input(message: Message, state: FSMContext):
    await state.update_data(address = message.text)
    data = await state.get_data()
    await state.set_state(None)
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏\n–§–ò–û: {data["FIO"]}\n–ù–æ–º–µ—Ä: {data["number"]}\n–†–∞–∑–º–µ—Ä: {data['size']}\n–ê–¥—Ä–µ—Å—Å: {data["address"]}",
                         reply_markup=kb.check_correct)
    
    
    

    
@router.callback_query(F.data == 'correct')
async def correct_handle(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(f"–í—ã –≤–≤–µ–ª–∏\n–§–ò–û: {data["FIO"]}\n–ù–æ–º–µ—Ä: {data["number"]}\n–†–∞–∑–º–µ—Ä: {data['size']}\n–ê–¥—Ä–µ—Å—Å: {data["address"]}")
    await callback.answer()
    await rq.set_user(data)
    await state.clear()
    await callback.message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω—ã, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=kb.back)
    
    
    
    
    
@router.message(F.text == "/admin")
async def admin_allow(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
    await state.clear()
    await state.set_state(Key.key)
    
    
@router.message(Key.key)
async def admin_outp(message: Message, state: FSMContext):
    tex = message.text
    await state.clear()
    load_dotenv()
    password = os.getenv("Password")
    if (tex == password):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ", reply_markup=kb.admin)
        
        
@router.callback_query(F.data == 'outp_list')
async def correct_handle(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(await rq.get_all_data(), reply_markup=kb.close)
        
        
@router.callback_query(F.data == 'clos')
async def correct_handle(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ", reply_markup=kb.admin)
    
    
    
@router.callback_query(F.data == 'del_user')
async def correct_handle(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    await state.set_state(Key.num)
    
    
@router.message(Key.num)
async def adress_input(message: Message, state: FSMContext):
    try:
        tex = int(message.text)
    except ValueError:
        await message.answer("–î–∞—É–Ω –µ–±–∞–Ω—ã–π –ß–ò–°–õ–û")
        return
    success = await rq.delete_user(tex)
    if success:
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ", reply_markup=kb.close)
    else:
        await state.clear()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.close)